# Importação dos dados
data <- read.csv("Churn_Modelling.csv")
# Remove colunas com dados não utilizados
data$RowNumber <- NULL
data$Surname <- NULL
# Substitui dados vazios por NA
data[data == ""] <- NA
# Substitui 1 e 0 por Yes e No
data$Exited[data$Exited == 1] <- "Yes"
data$Exited[data$Exited == 0] <- "No"
data$IsActiveMember[data$IsActiveMember == 1] <- "Yes"
data$IsActiveMember[data$IsActiveMember == 0] <- "No"
data$HasCrCard[data$HasCrCard == 1] <- "Yes"
data$HasCrCard[data$HasCrCard == 0] <- "No"
# Trata dados categóricos como factor
data$Geography = as.factor(data$Geography)
data$Gender = as.factor(data$Gender)
data$Exited = as.factor(data$Exited)
data$IsActiveMember = as.factor(data$Exited)
data$HasCrCard = as.factor(data$Exited)
# Define a seed para reprodução
set.seed(123)
# Levantamento de variáveis importantes
boruta.train <- Boruta(Exited~., data = data, doTrace = 2)
# Levantamento de variáveis importantes
boruta.train <- Boruta(Exited~.-CustomerId, data = data, doTrace = 2)
print(boruta.train)
plot(boruta.train, xlab = "", xaxt = "n")
lz<-lapply(1:ncol(boruta.train$ImpHistory),function(i)
boruta.train$ImpHistory[is.finite(boruta.train$ImpHistory[,i]),i])
names(lz) <- colnames(boruta.train$ImpHistory)
Labels <- sort(sapply(lz,median))
axis(side = 1,las=2,labels = names(Labels),
at = 1:ncol(boruta.train$ImpHistory), cex.axis = 0.7)
final.boruta <- TentativeRoughFix(boruta.train)
print(final.boruta)
plot(final.boruta, xlab = "", xaxt = "n")
axis(side = 1,las=2,labels = names(Labels),
at = 1:ncol(boruta.train$ImpHistory), cex.axis = 0.7)
# Divide os dados em treinamento e teste
trainIndex <- createDataPartition(data$Exited, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
model <- randomForest(Exited~.-CustomerId, data = trainData, ntree = 100)
# Valida a importância das variáveis
varImportance <- importance(model)
final.boruta <- TentativeRoughFix(boruta.train)
print(final.boruta)
plot(final.boruta, xlab = "", xaxt = "n")
axis(side = 1,las=2,labels = names(Labels),
at = 1:ncol(boruta.train$ImpHistory), cex.axis = 0.7)
# Divide os dados em treinamento e teste
trainIndex <- createDataPartition(data$Exited, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
model <- randomForest(Exited~.-CustomerId, data = trainData, ntree = 100)
# Valida a importância das variáveis
varImportance <- importance(model)
# Sumário e histograma das variáveis numéricas
summary(data$Age)
View(trainIndex)
View(varImportance)
# Sumário e histograma das variáveis numéricas
summary(data$Age)
hist(data$Age)
summary(data$Tenure)
hist(data$Tenure)
summary(data$EstimatedSalary)
hist(data$EstimatedSalary)
# Define as variáveis preditoras e a variável de resposta
predictors <- c("CreditScore", "Geography", "Age", "Balance", "NumOfProducts", "HasCrCard", "IsActiveMember", "Tenure", "EstimatedSalary")
# Treina o modelo de Random Forest
rf_model <- randomForest(Exited~., data = trainData[, c(predictors, "Exited")], ntree = 100)
# Fazer previsões no conjunto de teste
predictions <- predict(rf_model, newdata = testData[, predictors])
# Acurácia
accuracy <- mean(predictions == testData$Exited)
print(accuracy)
# Matriz de confusão
confusionMatrix(predictions, testData$Exited)
# Curva ROC e AUC
roc_curve <- roc(testData$Exited, as.numeric(predictions == "Yes"))
auc <- auc(roc_curve)
print(auc)
# Definir o esquema de validação cruzada manualmente
folds <- createFolds(trainData$Exited, k = 5)
# Criar um vetor para armazenar as métricas de avaliação
accuracy <- numeric(length = length(folds))
# Iterar sobre as partições e treinar/avaliar o modelo
for (i in 1:length(folds)) {
# Dividir os dados em treinamento e teste
train_indices <- unlist(folds[-i])
test_indices <- folds[[i]]
train_data <- trainData[train_indices, ]
test_data <- trainData[test_indices, ]
# Treinar o modelo randomForest
rf_model <- randomForest(Exited~., data = train_data, ntree = 100, mtry = 3)
# Fazer previsões no conjunto de teste
predictions <- predict(rf_model, newdata = test_data)
# Calcular a acurácia no conjunto de teste
accuracy[i] <- mean(predictions == test_data$Exited)
}
# Calcular a acurácia média da validação cruzada
mean_accuracy <- mean(accuracy)
print(mean_accuracy)
# Obter previsões no conjunto de treinamento
train_predictions <- predict(rf_model, newdata = trainData[, predictors])
# Fazer previsões no conjunto de teste ou em novos dados
predictions <- predict(rf_model, newdata = testData)
# Exibir as previsões
predictions
# Adicionar as previsões ao conjunto de teste
testData$PredictedExited <- predictions
# Exibir o conjunto de teste com as previsões
testData
